===========================================================================
			1. Naming Rules
===========================================================================

1-1. "building-blocks" should be the first prefix.

1-2. The top-single block name is "building-blocks"

1-3. Level prefix = "root" | "sub1" | "sub2" | "sub3"
	However, using deep down to sub3 is not recommended (WARNING)

1-3-A. Using "sub3" is not recommended (WARNING)

1-4. Except for the top-single block, Level prfix follows
	the first prefix.
	E.g., "building-blocks-sub1-..."

1-5. For "root" building blocks, the naming rule is:
	[first prefix = "building-blocks"]-[level prefix = "root"]-[NAME]
	E.g., "building-blocks-root-UI"

1-6. For "sub1" building blocks, which has a "root" building block, "ROOTNAME" as its parent, the naming rule is:
	[first prefix]-[level prefix = "sub1"]-[root name = "ROOTNAME"]-[NAME]
	E.g., "building-blocks-sub1-UI-wayland"

1-7. For "sub{N}" (N>1) building blocks, which has a "sub{N-1}" building block, "SUB{M}NAME" as its parent at level M (M < N), the naming rule is:
	[first prefix]-sub{N}-[root name = "ROOTNAME"]-[sub1 name = "SUB1NAME"]-...-[sub{N-1} name = "SUB{N-1}NAME"]-[NAME]
	E.g., "building-blocks-sub2-UI-wayland-core",
		"building-blocks-sub3-UI-wayland-core-extension_super"

1-8. In order to implement "radio-button" UI (choose only one), the block name starts with "chooseonlyone_"
	E.g., "building-blocks-root-chooseonlyone_Kernel"
	#### CAUTION: NOT SUPPORTED. NOT GUARANTEED TO WORK AS SUPPOSED ####

1-9. [NAME] = [a-zA-Z0-9_]+



===========================================================================
			2. Relations between blocks
===========================================================================

2-1. Top block (building-blocks) lists all root-level blocks
	Lists with Suggests (optional) and Requires (mandatory)

2-2. A parent block lists all of its direct child blocks (no grandchild listed)
	Lists with Suggests (optional) and Requires (mandatory)

2-3. A child block cannot have multiple parents.

2-4. Conflict may be defined between blocks.
	However, you need to get consents from all related stake-holders.

2-6. There cannot be any other relations defined between blocks.
	Exception: preset and features blocks may Requires/Suggests
	   other blocks to populate themselves with higher readability.
	   Refer to RULE 5-4.



===========================================================================
	3. Relations between a block and (non-block) packages
===========================================================================

3-1. A block may include non-block (individual) packages with Requires (mandatory) and Suggests (optional)

3-2. A package (not block) can exist in multiple blocks.

3-3. A package may be not included in any of the blocks
	TIC UI will list such packages in "MISC" section.





===========================================================================
		4. Maintainer and Review Rules
===========================================================================

4-1. Multiple maintainers (M:) per domain is possible. (limit = 3)

4-2. At least one maintainer per domain

4-3. Please do review in a week for incoming commits after review entry added for the maintainers

4-4. To comitters: add proper maintainers as the reviewers in gerrit.





===========================================================================
		5. Other Coding Rules
===========================================================================

5-1. A domain cannot add "BuildRequires"
	Global relations cannot be added by an individual domain.

5.2. A domain cannot add "Recommends", "Provides", "Enhances", "Supplements"
	We do not have any semantics for building blocks with such relations.
	When we have definitions for such semantics and have them implemented in
	TIC, we can allow then.

5.3. A block must NOT have any files included

5.4. A block that is not preset/feature cannot add "Requires"/"Suggests" on
another block that is not a direct child of it (ref. RULE 2.6)
	E.g., sub2-* cannot Requires/Suggests another root/sub1/sub2
	E.g., sub1-A cannot Requires/Suggests sub2-B-X
